//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace example { namespace Robot {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IRobotService. Instead, RobotServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class RobotServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IRobotService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotLeftCalledEventArgs^>^ LeftCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotLeftCalledEventArgs^>^ handler) 
        { 
            return _LeftCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<RobotServiceEventAdapter^>(sender), safe_cast<RobotLeftCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _LeftCalled -= token; 
        } 
    internal: 
        void raise(RobotServiceEventAdapter^ sender, RobotLeftCalledEventArgs^ args) 
        { 
            _LeftCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotRightCalledEventArgs^>^ RightCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotRightCalledEventArgs^>^ handler) 
        { 
            return _RightCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<RobotServiceEventAdapter^>(sender), safe_cast<RobotRightCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _RightCalled -= token; 
        } 
    internal: 
        void raise(RobotServiceEventAdapter^ sender, RobotRightCalledEventArgs^ args) 
        { 
            _RightCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotForwardCalledEventArgs^>^ ForwardCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotForwardCalledEventArgs^>^ handler) 
        { 
            return _ForwardCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<RobotServiceEventAdapter^>(sender), safe_cast<RobotForwardCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ForwardCalled -= token; 
        } 
    internal: 
        void raise(RobotServiceEventAdapter^ sender, RobotForwardCalledEventArgs^ args) 
        { 
            _ForwardCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotBackwardCalledEventArgs^>^ BackwardCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotBackwardCalledEventArgs^>^ handler) 
        { 
            return _BackwardCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<RobotServiceEventAdapter^>(sender), safe_cast<RobotBackwardCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _BackwardCalled -= token; 
        } 
    internal: 
        void raise(RobotServiceEventAdapter^ sender, RobotBackwardCalledEventArgs^ args) 
        { 
            _BackwardCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotStopCalledEventArgs^>^ StopCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotStopCalledEventArgs^>^ handler) 
        { 
            return _StopCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<RobotServiceEventAdapter^>(sender), safe_cast<RobotStopCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _StopCalled -= token; 
        } 
    internal: 
        void raise(RobotServiceEventAdapter^ sender, RobotStopCalledEventArgs^ args) 
        { 
            _StopCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotAutomaticCalledEventArgs^>^ AutomaticCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotAutomaticCalledEventArgs^>^ handler) 
        { 
            return _AutomaticCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<RobotServiceEventAdapter^>(sender), safe_cast<RobotAutomaticCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _AutomaticCalled -= token; 
        } 
    internal: 
        void raise(RobotServiceEventAdapter^ sender, RobotAutomaticCalledEventArgs^ args) 
        { 
            _AutomaticCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotManualCalledEventArgs^>^ ManualCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<RobotServiceEventAdapter^, RobotManualCalledEventArgs^>^ handler) 
        { 
            return _ManualCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<RobotServiceEventAdapter^>(sender), safe_cast<RobotManualCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ManualCalled -= token; 
        } 
    internal: 
        void raise(RobotServiceEventAdapter^ sender, RobotManualCalledEventArgs^ args) 
        { 
            _ManualCalled(sender, args);
        } 
    }

    // Property Read Events
    // Property Write Events
    // IRobotService Implementation
    virtual Windows::Foundation::IAsyncOperation<RobotLeftResult^>^ LeftAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<RobotRightResult^>^ RightAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<RobotForwardResult^>^ ForwardAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<RobotBackwardResult^>^ BackwardAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<RobotStopResult^>^ StopAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<RobotAutomaticResult^>^ AutomaticAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<RobotManualResult^>^ ManualAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);



private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _LeftCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _RightCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ForwardCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _BackwardCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _StopCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _AutomaticCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ManualCalled;
};

} } } } 
