//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace glovebox { namespace rover { namespace RPIROBOTAllJoyn { namespace MainInterface {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IMainInterfaceService. Instead, MainInterfaceServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class MainInterfaceServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IMainInterfaceService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceAutonomousCalledEventArgs^>^ AutonomousCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceAutonomousCalledEventArgs^>^ handler) 
        { 
            return _AutonomousCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MainInterfaceServiceEventAdapter^>(sender), safe_cast<MainInterfaceAutonomousCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _AutonomousCalled -= token; 
        } 
    internal: 
        void raise(MainInterfaceServiceEventAdapter^ sender, MainInterfaceAutonomousCalledEventArgs^ args) 
        { 
            _AutonomousCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceBackwardCalledEventArgs^>^ BackwardCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceBackwardCalledEventArgs^>^ handler) 
        { 
            return _BackwardCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MainInterfaceServiceEventAdapter^>(sender), safe_cast<MainInterfaceBackwardCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _BackwardCalled -= token; 
        } 
    internal: 
        void raise(MainInterfaceServiceEventAdapter^ sender, MainInterfaceBackwardCalledEventArgs^ args) 
        { 
            _BackwardCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceForwardCalledEventArgs^>^ ForwardCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceForwardCalledEventArgs^>^ handler) 
        { 
            return _ForwardCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MainInterfaceServiceEventAdapter^>(sender), safe_cast<MainInterfaceForwardCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ForwardCalled -= token; 
        } 
    internal: 
        void raise(MainInterfaceServiceEventAdapter^ sender, MainInterfaceForwardCalledEventArgs^ args) 
        { 
            _ForwardCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceLeftCalledEventArgs^>^ LeftCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceLeftCalledEventArgs^>^ handler) 
        { 
            return _LeftCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MainInterfaceServiceEventAdapter^>(sender), safe_cast<MainInterfaceLeftCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _LeftCalled -= token; 
        } 
    internal: 
        void raise(MainInterfaceServiceEventAdapter^ sender, MainInterfaceLeftCalledEventArgs^ args) 
        { 
            _LeftCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceManualCalledEventArgs^>^ ManualCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceManualCalledEventArgs^>^ handler) 
        { 
            return _ManualCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MainInterfaceServiceEventAdapter^>(sender), safe_cast<MainInterfaceManualCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ManualCalled -= token; 
        } 
    internal: 
        void raise(MainInterfaceServiceEventAdapter^ sender, MainInterfaceManualCalledEventArgs^ args) 
        { 
            _ManualCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceRightCalledEventArgs^>^ RightCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceRightCalledEventArgs^>^ handler) 
        { 
            return _RightCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MainInterfaceServiceEventAdapter^>(sender), safe_cast<MainInterfaceRightCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _RightCalled -= token; 
        } 
    internal: 
        void raise(MainInterfaceServiceEventAdapter^ sender, MainInterfaceRightCalledEventArgs^ args) 
        { 
            _RightCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceStopCalledEventArgs^>^ StopCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MainInterfaceServiceEventAdapter^, MainInterfaceStopCalledEventArgs^>^ handler) 
        { 
            return _StopCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MainInterfaceServiceEventAdapter^>(sender), safe_cast<MainInterfaceStopCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _StopCalled -= token; 
        } 
    internal: 
        void raise(MainInterfaceServiceEventAdapter^ sender, MainInterfaceStopCalledEventArgs^ args) 
        { 
            _StopCalled(sender, args);
        } 
    }

    // Property Read Events
    // Property Write Events
    // IMainInterfaceService Implementation
    virtual Windows::Foundation::IAsyncOperation<MainInterfaceAutonomousResult^>^ AutonomousAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MainInterfaceBackwardResult^>^ BackwardAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MainInterfaceForwardResult^>^ ForwardAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MainInterfaceLeftResult^>^ LeftAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MainInterfaceManualResult^>^ ManualAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MainInterfaceRightResult^>^ RightAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MainInterfaceStopResult^>^ StopAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);



private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _AutonomousCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _BackwardCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ForwardCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _LeftCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ManualCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _RightCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _StopCalled;
};

} } } } } 
